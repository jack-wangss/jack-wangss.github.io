I"h-<p>大多数计算机图形的图片都是以某种光栅显示的。光栅显示将图片表达为矩形的像素数组，每个像素通常会通过红、绿、蓝三个颜色分量组成不同的颜色。</p>

<h2 id="31-光栅化设备-raster-devices">3.1 光栅化设备 Raster Devices</h2>

<p>讨论光栅化图片之前，我们先来看看使用光栅化图片的设备。</p>

<ul>
  <li>输出
    <ul>
      <li>显示
        <ul>
          <li>透射式：液晶显示（LCD）</li>
          <li>发光式：发光二极管显示器（LED）</li>
        </ul>
      </li>
      <li>硬拷贝
        <ul>
          <li>二进制：喷墨打印机</li>
          <li>连续色调：热升华打印机</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>输入
    <ul>
      <li>2D 数组传感器：数码相机</li>
      <li>1D 数组传感器：平板扫描仪</li>
    </ul>
  </li>
</ul>

<h3 id="311-显示">3.1.1 显示</h3>

<p>现在的显示主要可以分成两种，一种是发光式（emissive），这种方式是通过像素直接发光；另一种式透射式（transmissive），这种方式像素本身不发光，而是控制可以通过像素的进光量。</p>

<p>LED（Lighting-emitting）是一种发光式显示。LED像素有三个红绿蓝三个子像素构成，显示器距我们一定距离时，我们只能感受到三个子像素混合的光。</p>

<p>LCD（Liquid crystal）是透射式显示。液晶的分子结构可以旋转光的偏振，旋转角度通过电压控制。LCD像素背后有一个偏振层，可以通过偏振水平光线进行发光；像素前面也有一个偏振层，偏振垂直光。LCD像素同样有三个子像素，子像素分别过滤红绿蓝三种颜色。</p>

<div style="text-align: center">
<img src="/img/posts/3 Raster Images/1.png" />
</div>

<h3 id="312-硬拷贝设备">3.1.2 硬拷贝设备</h3>

<p>打印机也是一种光栅化设备，但大多数打印机只能打印二进制图片：一个位置要么有颜料，要么没有。喷墨式打印机就是一个通过扫描，打印光栅化图片的设备，它通过一个带墨水的喷头，逐行在纸上打印，有颜色的地方就喷墨，没有颜色就忽略。彩色打印时，会使用多个喷墨头，每个头有不同颜色的颜料，因此在打印某个位置时，可以使用多个颜色的混合。喷墨式打印机没有物理的像素概念，它的分辨率取决于喷墨头的大小。</p>

<p>热升华打印机是一种连续色调打印机，它不像喷墨式，在每个像素上只有两种状态：有颜料和无颜料。它可以控制每个像素上颜料的量。热升华打印机通过色卷提供颜料，通过打印头包含的加热元素把色卷的颜料打印到纸上。</p>

<p>和显示器不同，打印设备的分辨率不用像素数量描述，而是用像素密度（pixel density）。比如热升华打印机的打印头上每英寸有300个元素，那整个页面的分辨率就是300 ppi（pixels per inch）。喷墨式打印机每英寸如果可以打印1200个点，那它的分辨率就是1200 dpi（dots per inch）。</p>

<h3 id="313-输入设备">3.1.3 输入设备</h3>

<p>光栅化输入设备一般是通过一组传感器，测得每个像素上的光线。数码相机就是一种输入设备，相机中的图片传感器是一个包含感光像素的半导体设备。常见的类型包括电耦合器件传感器 CCDs(charge-coupled devices)和金属氧化物半导体传感器 CMOS（complimentary metal-oxide-semiconductor）。相机镜头将要拍摄的场景图投射到传感器上，传感器的每个像素计算收到的光能，最终输出为一张图像。相机通常会用颜色过滤数组或马赛克让每个像素只能接受红绿蓝三种光，然后通过去马赛克（demosaicking）的过程，处理缺失的值。</p>

<p>相机的分辨率由像素的数量决定，3000列2000行的像素得到3000*2000分辨率的图片，总共有6百万的像素，是一个6百万像素（MP）的相机。</p>

<p>平板扫描仪同样也是通过红绿蓝三种颜色度量，和热升华打印机一样，它也是使用一维数组扫描头逐行扫描。平板扫描仪行的分辨率是这个一维数组的大小，纵向的分辨率由扫描头的扫描速度决定。一个 $3 \times n_x$ 数组的颜色扫描仪，$ n_x $是像素的数量，一共有红绿蓝三行颜色过滤器。</p>

<h2 id="32-图片像素几何">3.2 图片，像素，几何</h2>

<p>当我们处理光栅图片时，通常采用二维光能分布的形式：把从显示器发出的光看作是显示表面上这个位置的一个函数；把落在相机传感器上的光看作是传感器表面穿过这个位置的一个函数；把反射率作为纸上这个位置的一个函数。因此，在物理世界中，图片是一组函数，被定义在二维数组中。据此我们把图像抽象为下面的公式：</p>

\[I(x,y):R \to V,\]

<p>$R\subset R^2$是矩形的区域，$V$是像素值的集合。最简单的一个例子是灰度图，灰度图的每个值只代表亮度（没有颜色），$V=R^+$。彩色图时，每个像素的值由红绿蓝组成，$V=(R^+)^3$。</p>

<p>图片有$n_x$列，$n_y$行，由于xy是像素的中心点，所以$n_x \times n_y$的矩形域为：</p>

\[R=[-0.5,n_x-0.5] \times [-0.5,n_y-0.5].\]

<h3 id="321-像素值">3.2.1 像素值</h3>

<p>图片中每个像素可以通过浮点数组表示。但这种方式会占用大量空间，一张 10 兆像素的照片将消耗大约 115 MB
的内存。</p>

<p>因此我们希望显示的图像有更小的范围，虽然光强范围理论上是无限的，但任何显示设备都有最大的范围，所以我们可以给像素的值固定一个范围，一般是[0,1]。以浮点存储的图像，支持广泛的值，叫做高动态范围（HDR）图像；对于固定范围，或以整数储存的值，叫做低动态范围（LDR）。</p>

<p>下面是常见的像素格式：</p>

<ul>
  <li>1 位灰度——没有中间灰度的文本和其他图像
需要（需要高分辨率）；</li>
  <li>8 位 RGB 固定范围颜色（每个像素总共 24 位）——网络和电子邮件应用程序、消费者照片；</li>
  <li>8 位或 10 位固定范围 RGB（24–30 位/像素）——计算机显示器的数字接口；</li>
  <li>12 至 14 位固定范围 RGB（36–42 位/像素）—原始相机图像用于
专业摄影；</li>
  <li>16 位固定范围 RGB（48 位/像素）——专业摄影和打印； 用于固定范围图像的图像处理的中间格式；</li>
  <li>16 位固定范围灰度（16 位/像素）——放射学和医学成像；</li>
  <li>16 位“半精度”浮点 RGB——HDR 图像； 用于实时渲染的中间格式；</li>
  <li>32 位浮点 RGB — 用于软件渲染和处理 HDR 图像的通用中间格式。</li>
</ul>

<h3 id="322-显示器强度和伽马">3.2.2 显示器强度和伽马</h3>

<p>所有现代显示器都会把输入的像素数值转化为强度等级。实际的显示器还会有一些非0的强度用来表示关闭的状态。</p>

<p>要在显示器上正确的显示图像，有两个关键问题需要理解。首先显示器在输入方面是非线性的，比如你给显示器三个输入 0，0.5，1.0，而显示器中的实际强度可能是 0，0.25，1.0。这种非线性的近似特征，显示器通常用$\gamma$来决定。$\gamma$值是下面这个公式的自由度</p>

\[displayed \ intensity=(maximum \ intensity)a^\gamma\]

<p>a表示输入的[0,1]像素值。比如显示器的伽马值为2.0，输入的像素值为0.5，那显示的强度就是四分之一的最大强度，因为$0.5^2=0.25$。用 $\gamma$ 来描述显示器的非线性只是一个近似值； 我们不需要很高的准确度来评估一个设备。衡量非线性的一个很好的方法是找到a的值是多少时，得到一般的强度：</p>

\[0.5=a^\gamma\]

<p>如果我们找到了a，就可以通过对两边同时取对数，得到$\gamma$：</p>

\[\gamma=\frac{\ln 0.5}{\ln a}\]

<p>我们可以通过一个标准的方式去找到a值，显示一个黑白棋盘的像素集合，在旁边再显示一个a的灰度图，不断的调整a逼近黑白块的颜色。</p>

<div style="text-align: center">
<img src="/img/posts/3 Raster Images/2.png" />
</div>

<p>一旦我们求得$\gamma$，就可以通过伽马将显示强度等于输入的a值：</p>

\[a^{'} =a^{\frac{1}{\gamma}}\]

<p>结合前面的公式：</p>

\[displayed \ intensity=(a^{'})^\gamma=(a^{\frac{1}{\gamma}})^\gamma=a\]

<p>另一个真实显示图片的特性是，输入值是可量化的。我们的输入是[0,1]的浮点数，但对应的是固定的整数，最常见的就是0-255。这意味着a的范围并不是[0,1]所有的数，而是：</p>

\[a={\{\frac{0}{255},\frac{1}{255},...\ ,\frac{255}{255}\}}\]

<p>因此在应用中，需要准确计算光强。不过一般应用对颜色也不需要这么高的准确度。</p>

<h2 id="33-rgb-颜色">3.3 RGB 颜色</h2>

<p>RGB颜色空间的基本思想是混合三原光，混合方式为加法。通过调整三原光的亮度，可以创建RGB显示器中的所有颜色。</p>

<h2 id="34-alpha-混合">3.4 Alpha 混合</h2>

<p>我们经常需要重新修改像素的内容，一个常见的例子就是混合（compositing），当我们已经有了一个背景，但是又有一个前景图片覆盖它，就需要混合。对于不透明的像素，可以直接用前景像素覆盖它；对于完全透明的像素，可以完全忽略；对于部分透明的像素，就需要一些特殊的处理了。</p>

<p>混合除了对本身有透明属性像素的处理，对前景图的轮廓也需要混合，混合最重要的是像素覆盖率，它告诉我们被前景层覆盖的像素，我们可以把这个覆盖率称作$\alpha$。如果我们想混合前景颜色$c_f$和背景色$c_b$，像素覆盖率为$\alpha$，则：</p>

\[c= \alpha c_f + (1-\alpha)c_b. \tag{3.2}\]

<p>图片中$\alpha$值应该存在不同的灰度图中，被叫做$\alpha$蒙版，或者透明蒙版。也可以存在RGB图的第四个通道中，这样的图片也叫做RGBA图片。</p>

<h2 id="341-图像储存">3.4.1 图像储存</h2>

<p>大多数 RGB 图像格式对每个红色、绿色和蓝色通道使用 8 位。 对于单个百万像素图像，这会产生大约 3 兆字节的原始信息。 为了减少存储需求，大多数图像格式允许某种压缩。 在高级别上，这种压缩要么是无损的，要么是有损的。 在无损压缩中不会丢弃任何信息，而一些信息在有损系统中不可恢复地丢失。 流行的图像存储格式包括：</p>

<ul>
  <li>.jpg 这种有损格式根据人类视觉系统中的阈值压缩图像块。 这种格式适用于自然图像。</li>
  <li>tiff 尽管存在许多其他选项，这种格式最常用于保存二进制图像或无损压缩的 8 位或 16 位 RGB。</li>
  <li>ppm 尽管存在许多选项，但这种非常简单的无损、未压缩格式最常用于 8 位 RGB 图像。</li>
  <li>PNG 这是一套无损格式，带有一套很好的开源管理工具。</li>
</ul>

<p>由于压缩和变体，可能涉及为图像编写输入/输出流程。 幸运的是，通常可以依靠库来读取和写入标准文件格式。 对于追求效率不关心质量的应用程序，一个简单的选择是使用原始 ppm 文件，通常可以通过将存储图像在内存中的数组转储到文件中来编写这些文件，并在适当的标题前添加。</p>
:ET